@model IEnumerable<Project_MVC_CF_Special.Models.Product>

@{
    ViewBag.Title = "Index";
}

<h2>Product List</h2>

<!-- Create New Button -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#createModal">
    Create New
</button>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.ProductName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Category.CategoryName)
        </th>
        <th>Actions</th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ProductName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.CategoryName)
            </td>
            <td>
                <button class="btn btn-info btn-sm" data-toggle="modal" data-target="#detailsModal"
                        onclick="loadDetails(@item.ProductID)">
                    Details
                </button>
                <button class="btn btn-warning btn-sm" data-toggle="modal" data-target="#editModal"
                        onclick="loadEdit(@item.ProductID)">
                    Edit
                </button>
                <button class="btn btn-danger btn-sm" data-toggle="modal" data-target="#deleteModal"
                        onclick="loadDelete(@item.ProductID)">
                    Delete
                </button>
            </td>
        </tr>
    }
</table>

<!-- Create Modal -->
<div class="modal fade" id="createModal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Create Product</h4>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Create", "Product", FormMethod.Post, new { id = "createForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-group">
                        <label for="ProductName">Product Name</label>
                        <input type="text" class="form-control" id="ProductName" name="ProductName" required />
                    </div>

                    <div class="form-group">
                        <label for="CategoryID">Category</label>
                        @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Product Details</h4>
            </div>
            <div class="modal-body" id="detailsContent">
                <!-- Details will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Edit Product</h4>
            </div>
            <div class="modal-body" id="editContent">
                <!-- Edit form will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title">Delete Product</h4>
            </div>
            <div class="modal-body" id="deleteContent">
                <!-- Delete confirmation will be loaded here -->
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>

        // Load Details
        function loadDetails(id) {
            $.get('@Url.Action("Details", "Product")/' + id, function (data) {
                $('#detailsContent').html(`
            <p><strong>ID:</strong> ${data.ProductID}</p>
            <p><strong>Name:</strong> ${data.ProductName}</p>
            <p><strong>Category:</strong> ${data.CategoryName}</p> <!-- Changed from CategoryID to CategoryName -->
        `);
            }).fail(function (xhr, status, error) {
                console.error("Error loading details:", error);
                $('#detailsContent').html('<p class="text-danger">Error loading product details</p>');
            });
        }

        // Load Edit Form
        function loadEdit(id) {
            $.get('@Url.Action("Edit", "Product")/' + id, function (data) {
                if (data.error) {
                    alert(data.error);
                    return;
                }

                // Generate category options from the returned data
                var categoryOptions = '';
                $.each(data.Categories, function (index, category) {
                    categoryOptions += `<option value="${category.Value}" ${category.Value == data.CategoryID ? 'selected' : ''}>
                                ${category.Text}
                              </option>`;
                });

                $('#editContent').html(`
            <form id="editForm" action="@Url.Action("Edit", "Product")/${id}" method="post">
                @Html.AntiForgeryToken()
                <input type="hidden" name="ProductID" value="${data.ProductID}" />

                <div class="form-group">
                    <label for="ProductName">Product Name</label>
                    <input type="text" class="form-control" id="ProductName" name="ProductName"
                           value="${data.ProductName || ''}" required />
                </div>

                <div class="form-group">
                    <label for="CategoryID">Category</label>
                    <select class="form-control" id="CategoryID" name="CategoryID">
                        ${categoryOptions}
                    </select>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        `);
            }).fail(function (xhr, status, error) {
                console.error("Error:", status, error);
                alert("Error loading product data");
            });
        }

        // Load Delete Confirmation
        function loadDelete(id) {
            $.get('@Url.Action("Delete", "Product")/' + id, function(data) {
                $('#deleteContent').html(`
                    <p>Are you sure you want to delete this product?</p>
                    <p><strong>ID:</strong> ${data.ProductID}</p>
                    <p><strong>Name:</strong> ${data.ProductName}</p>
                    <form id="deleteForm" action="@Url.Action("Delete", "Product")/${id}" method="post">
                        @Html.AntiForgeryToken()
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-danger">Delete</button>
                        </div>
                    </form>
                `);
            });
        }

        // Handle form submissions with AJAX
        $(document).ready(function() {
            // Create Form
            $('#createForm').submit(function(e) {
                e.preventDefault();
                $.post('@Url.Action("Create", "Product")', $(this).serialize(), function() {
                    $('#createModal').modal('hide');
                    location.reload(); // Refresh page to see changes
                });
            });

            // Edit Form (dynamic, so we use event delegation)
            $(document).on('submit', '#editForm', function(e) {
                e.preventDefault();
                $.post($(this).attr('action'), $(this).serialize(), function() {
                    $('#editModal').modal('hide');
                    location.reload();
                });
            });

            // Delete Form (dynamic, so we use event delegation)
            $(document).on('submit', '#deleteForm', function(e) {
                e.preventDefault();
                $.post($(this).attr('action'), $(this).serialize(), function() {
                    $('#deleteModal').modal('hide');
                    location.reload();
                });
            });
        });


        $(document).ready(function () {
            // Prevent modal close on outside click & add shake effect
            $('.modal').on('click', function (event) {
                if ($(event.target).hasClass('modal')) { // If clicked outside modal-content
                    let modalContent = $(this).find('.modal-content');
                    modalContent.addClass('shake'); // Add shake class
                    setTimeout(function () {
                        modalContent.removeClass('shake'); // Remove shake after animation
                    }, 400);
                }
            });
        });

    </script>

    <style>
        @@keyframes shake {
            0%, 100% {
                transform: translateX(0);
            }

            25% {
                transform: translateX(-5px);
            }

            50% {
                transform: translateX(5px);
            }

            75% {
                transform: translateX(-5px);
            }
        }

        .shake {
            animation: shake 0.4s ease-in-out;
        }

    </style>


}

